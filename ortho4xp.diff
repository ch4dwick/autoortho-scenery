diff --git a/Ortho4XP.py b/Ortho4XP.py
index 58b10c9..daba489 100755
--- a/Ortho4XP.py
+++ b/Ortho4XP.py
@@ -61,15 +61,33 @@ if __name__ == '__main__':
                 tile=CFG.Tile(lat,lon,'')
                 tile.default_website=provider_code
                 tile.default_zl=zoomlevel
-            except:
+                tile.read_from_config()
+            except Exception as e:
+                print("Some kind of exception occurred!")
+                print(e)
                 print(cmd_line); sys.exit()
+
+        # Work around backwards return code logic
+        success = 1
         try:
+            print("Build poly file")
             VMAP.build_poly_file(tile)
+            print("Build mesh")
             MESH.build_mesh(tile)
+            print("Build masks")
             MASK.build_masks(tile)
-            TILE.build_tile(tile)
+            print("Build tile")
+            success = TILE.build_tile(tile)
             print("Bon vol!")
-        except:
+        except Exception as e:
             print("Crash!")
- 
+            print(e)
+            success = 0
+            #sys.exit(1)
+
+        if success:
+            print("Successful tile build")
+        else:
+            print("Unsusccessful tile build.  Exit with error")
+            sys.exit(1)
         
diff --git a/src/O4_Config_Utils.py b/src/O4_Config_Utils.py
index 32067a1..fbba41c 100755
--- a/src/O4_Config_Utils.py
+++ b/src/O4_Config_Utils.py
@@ -155,12 +155,14 @@ class Tile():
     def read_from_config(self,config_file=None):
         if not config_file: 
             config_file=os.path.join(self.build_dir,"Ortho4XP_"+FNAMES.short_latlon(self.lat,self.lon)+".cfg")
+            print(f"CONFIG FILE: {config_file}")
             if not os.path.isfile(config_file):
                 config_file=os.path.join(self.build_dir,"Ortho4XP.cfg")
                 if not os.path.isfile(config_file):
                     UI.lvprint(0,"CFG error: No config file found for tile",FNAMES.short_latlon(self.lat,self.lon))
                     return 0
         try:
+            print(f"CONFIG FILE: {config_file}")
             f=open(config_file,'r')
             for line in f.readlines():
                 line=line.strip()
@@ -369,6 +371,8 @@ class Ortho4XP_Config(tk.Toplevel):
         custom_build_dir=self.parent.custom_build_dir_entry.get()
         build_dir=FNAMES.build_dir(lat,lon,custom_build_dir)
         try: 
+            tilecfg=os.path.join(build_dir,'Ortho4XP_'+FNAMES.short_latlon(lat,lon)+'.cfg')
+            print(f"TILE CFG: {tilecfg}")
             f=open(os.path.join(build_dir,'Ortho4XP_'+FNAMES.short_latlon(lat,lon)+'.cfg'),'r')
         except:
             try:
diff --git a/src/O4_GUI_Utils.py b/src/O4_GUI_Utils.py
index ce2d629..7f882a1 100755
--- a/src/O4_GUI_Utils.py
+++ b/src/O4_GUI_Utils.py
@@ -853,6 +853,12 @@ class Ortho4XP_Earth_Preview(tk.Toplevel):
         self.canvas.bind("<Double-Button-1>",self.select_tile)
         self.canvas.bind("<Shift-ButtonPress-1>",self.add_tile)
         self.canvas.bind("<Control-ButtonPress-1>",self.toggle_to_custom)
+        
+        self.canvas.bind("<ButtonPress-1>", self.button_1_down)
+        self.canvas.bind("<B1-Motion>", self.button_1_move)
+        self.canvas.bind("<ButtonRelease-1>", self.button_1_up)
+        self.rect = None
+
         self.canvas.focus_set()
         self.draw_canvas(self.nx0,self.ny0)
         self.active_lat=lat 
@@ -1100,6 +1106,39 @@ class Ortho4XP_Earth_Preview(tk.Toplevel):
             self.dico_tiles_todo.pop((lat,lon),None)
         return
 
+
+    def button_1_down(self, event):
+        x=self.canvas.canvasx(event.x)
+        y=self.canvas.canvasy(event.y)
+        #self.rect = self.canvas.create_rectangle(x, y, 1, 1, fill="")
+        print(f"BUTTON DOWN: {x}, {y}")
+
+
+    def button_1_move(self, event):
+
+        x=self.canvas.canvasx(event.x)
+        y=self.canvas.canvasy(event.y)
+        (lat,lon)=[floor(t) for t in GEO.pix_to_wgs84(x,y,self.earthzl)]
+        if (lat,lon) not in self.dico_tiles_todo:
+            [x0,y0]=GEO.wgs84_to_pix(lat+1,lon,self.earthzl)
+            [x1,y1]=GEO.wgs84_to_pix(lat,lon+1,self.earthzl)
+            if not OsX:
+                self.dico_tiles_todo[(lat,lon)]=self.canvas.create_rectangle(x0,y0,x1,y1,fill='red',stipple='gray12') 
+            else:
+                self.dico_tiles_todo[(lat,lon)]=self.canvas.create_rectangle(x0+2,y0+2,x1-2,y1-2,outline='red',width=1)
+        return
+        #self.rect = self.canvas.create_rectangle(x, y, 1, 1, fill="")
+        print(f"MOUSE MOVE: {x}, {y}")
+
+    def button_1_up(self, event):
+        x=self.canvas.canvasx(event.x)
+        y=self.canvas.canvasy(event.y)
+        self.rect = None
+        print(f"BUTTON UP: {x}, {y}")
+
+    
+
+
     def batch_build(self):
         list_lat_lon=sorted(self.dico_tiles_todo.keys())
         if not list_lat_lon: return
diff --git a/src/O4_Imagery_Utils.py b/src/O4_Imagery_Utils.py
index 333d453..dd9b71e 100755
--- a/src/O4_Imagery_Utils.py
+++ b/src/O4_Imagery_Utils.py
@@ -1422,7 +1422,13 @@ def convert_texture(tile,til_x_left,til_y_top,zoomlevel,provider_code,type='dds'
         file_to_convert=os.path.join(file_dir,jpeg_file_name)
     # eventually the dds conversion
     if type=='dds':
-        if not dxt5:
+        if providers_dict[provider_code].get('skip_img'):
+            with open(os.path.join(tile.build_dir,'textures',out_file_name), 'a'):
+                pass
+            #try: os.remove(os.path.join(UI.Ortho4XP_dir,'tmp',png_file_name))
+            try: os.remove(file_to_convert)
+            except: pass
+        elif not dxt5:
             conv_cmd=[dds_convert_cmd,'-bc1','-fast',file_to_convert,os.path.join(tile.build_dir,'textures',out_file_name),devnull_rdir]
         else:
             conv_cmd=[dds_convert_cmd,'-bc3','-fast',file_to_convert,os.path.join(tile.build_dir,'textures',out_file_name),devnull_rdir]
@@ -1443,21 +1449,23 @@ def convert_texture(tile,til_x_left,til_y_top,zoomlevel,provider_code,type='dds'
                 return
             conv_cmd=[gdalwarp_cmd,'-of','Gtiff','-co','COMPRESS=JPEG','-s_srs','epsg:3857','-t_srs','epsg:4326','-ts','4096','4096','-rb',tmp_tif_file_name,os.path.join(FNAMES.Geotiff_dir,out_file_name)] 
     tentative=0
-    while True:
-        if not subprocess.call(conv_cmd,stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT):
-            break
-        tentative+=1
-        if tentative==10:
-            UI.lvprint(1,"ERROR: Could not convert texture",os.path.join(tile.build_dir,'textures',out_file_name),"(10 tries)")
-            break
-        UI.lvprint(1,"WARNING: Could not convert texture",os.path.join(tile.build_dir,'textures',out_file_name))
-        time.sleep(1)
-    if erase_tmp_png:
-        try: os.remove(os.path.join(UI.Ortho4XP_dir,'tmp',png_file_name))
-        except: pass
-    if erase_tmp_tif:
-        try: os.remove(os.path.join(UI.Ortho4XP_dir,'tmp',png_file_name))
-        except: pass
+    try:
+        while True and not providers_dict[provider_code].get('skip_img'):
+            if not subprocess.call(conv_cmd,stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT):
+                break
+            tentative+=1
+            if tentative==10:
+                UI.lvprint(1,"ERROR: Could not convert texture",os.path.join(tile.build_dir,'textures',out_file_name),"(10 tries)")
+                break
+            UI.lvprint(1,"WARNING: Could not convert texture",os.path.join(tile.build_dir,'textures',out_file_name))
+            time.sleep(1)
+    finally:
+        if erase_tmp_png:
+            try: os.remove(os.path.join(UI.Ortho4XP_dir,'tmp',png_file_name))
+            except: pass
+        if erase_tmp_tif:
+            try: os.remove(os.path.join(UI.Ortho4XP_dir,'tmp',png_file_name))
+            except: pass
     return 
 ###############################################################################################################################
 
diff --git a/src/O4_Mesh_Utils.py b/src/O4_Mesh_Utils.py
index 497cc73..28b7e8d 100755
--- a/src/O4_Mesh_Utils.py
+++ b/src/O4_Mesh_Utils.py
@@ -427,11 +427,12 @@ def build_mesh(tile):
               '{:.9g}'.format(tile.dem.nodata),
               '{:.9g}'.format(tile.curvature_tol*curv_tol_scaling),
               '{:.9g}'.format(tile.min_angle),str(hmin_effective),alt_file,weight_file,poly_file]
-    
+    print(mesh_cmd) 
     del(tile.dem) # for machines with not much RAM, we do not need it anymore
     tile.dem=None
     UI.vprint(1,"-> Start of the mesh algorithm Triangle4XP.")
     UI.vprint(2,'   Mesh command:',' '.join(mesh_cmd))
+    print(f"   Mesh command: {' '.join(mesh_cmd)}")
     fingers_crossed=subprocess.Popen(mesh_cmd,stdout=subprocess.PIPE,bufsize=0)
     while True:
         line = fingers_crossed.stdout.readline()
@@ -448,6 +449,7 @@ def build_mesh(tile):
         UI.vprint(0,"\nWARNING: Triangle4XP could not achieve the requested quality (min_angle), most probably due to an uncatched OSM error.\n"+\
                     "It will be tempted now with no angle constraint (i.e. min_angle=0).")
         mesh_cmd[-5]='{:.9g}'.format(0)
+        print(mesh_cmd) 
         fingers_crossed=subprocess.Popen(mesh_cmd,stdout=subprocess.PIPE,bufsize=0)
         while True:
             line = fingers_crossed.stdout.readline()
diff --git a/src/O4_Tile_Utils.py b/src/O4_Tile_Utils.py
index 036430e..d6e5044 100755
--- a/src/O4_Tile_Utils.py
+++ b/src/O4_Tile_Utils.py
@@ -75,6 +75,7 @@ def build_tile(tile):
         UI.lvprint(0,"ERROR: Cannot create tile subdirectories.")
         UI.vprint(3,e)
         UI.exit_message_and_bottom_line('')
+        # :(
         return 0
     
     download_queue=queue.Queue()
